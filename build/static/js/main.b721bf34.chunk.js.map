{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","notesToShow","filter","useEffect","noteService","initialNotes","console","log","length","map","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAaeA,EAXF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACZC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACI,qBAAIC,UAAU,OAAd,UACKJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCJ1CK,EAAU,aAwCD,EAnBA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAClB,OAAOA,EAASC,SAgBL,EAXA,SAAAC,GAEX,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SClCvCK,EAAe,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACrB,OAAe,OAAZA,EACM,KAIP,qBAAKd,UAAU,QAAf,SACGc,KAKDC,EAAS,WAOb,OACE,sBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAIV,UACE,uBACA,2GA6FSC,EAxFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,IAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMVC,EAAcJ,EAAUJ,EAAQA,EAAMS,QAAO,SAAAnC,GAAI,OAAIA,EAAKG,aAG/DiC,qBAAU,WACTC,IACY3B,MAAK,SAAA4B,GACJX,EAASW,QAErB,IAEHC,QAAQC,IAAI,SAAUN,EAAYO,OAAQ,SA+C1C,OACE,gCACE,uCACA,cAAC,EAAD,CAAcvB,QAASc,IACvB,8BACE,yBAAQ1B,QAAS,kBAAKyB,GAAYD,IAAlC,kBACQA,EAAU,YAAc,WAGlC,6BACGI,EAAYQ,KAAI,SAAA1C,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAC1BC,iBAAkB,kBAnCC,SAACc,GAC1B,IAAMf,EAAO0B,EAAMiB,MAAK,SAAAC,GAAC,OAAIA,EAAE7B,KAAOA,KAChC8B,EAAW,2BACZ7C,GADY,IAEfG,WAAYH,EAAKG,YAGnBkC,EAAmBtB,EAAI8B,GACXnC,MAAK,SAAAoC,GACJnB,EAASD,EAAMgB,KAAI,SAAA1C,GAAI,OAAIA,EAAKe,KAAOA,EAAKf,EAAO8C,SAEpDC,OAAM,SAAAC,GAELf,EAAgB,SAAD,OACJjC,EAAKK,QADD,sCAGf4C,YAAW,WACThB,EAAgB,QACf,KACHN,EAASD,EAAMS,QAAO,SAAAS,GAAC,OAAIA,EAAE7B,KAAOA,SAgBpBmC,CAAmBlD,EAAKe,MADpCf,EAAKe,SAKpB,uBAAMoC,SA5DM,SAACC,GACfA,EAAMC,iBACNd,QAAQC,IAAI,iBAAkBY,EAAME,QACpC,IAAMC,EAAa,CACjBlD,QAASuB,EACT4B,MAAM,IAAIC,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAG7BvB,EAAmBkB,GACP7C,MAAK,SAAAoC,GACJnB,EAASD,EAAMmC,OAAOf,IACtBjB,EAAW,QAgDtB,UACI,uBAAOiC,MAAOlC,EAASmC,SA7CN,SAACX,GACxBb,QAAQC,IAAIY,EAAME,OAAOQ,OACzBjC,EAAWuB,EAAME,OAAOQ,UA4ClB,wBAAQE,KAAK,SAAb,qBAEJ,cAAC,EAAD,QC/GNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b721bf34.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important ? 'make not important' : 'make important'\n    \n    return (\n        <li className='note'>\n            {note.content}\n            <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\n//const baseUrl = 'http://localhost:3001/notes' //for local json file\n//const baseUrl = 'http://localhost:3001/api/notes' //for local server backend\n//const baseUrl = 'https://powerful-ridge-47811.herokuapp.com/api/notes' //for heroku deployed backend\nconst baseUrl = '/api/notes' //realtive url for production build \n\n//the 'then' method of a promise also returns a promise\n\n// const getAll = () => {\n//     const request = axios.get(baseUrl)\n//     return request.then(response => response.data)\n// }\n\n// const getAll = () => {\n//     const request = axios.get(baseUrl)\n//     const nonExisting = {\n//       id: 10000,\n//       content: 'This note is not saved to server',\n//       date: '2019-05-30T17:30:31.098Z',\n//       important: true,\n//     }\n//     return request.then(response => response.data.concat(nonExisting))\n// }\n\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => {\n    return response.data\n  })\n}\n\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\n// returns an object that has three functions\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n}\n\n/*\nsince the names of the keys and the assigned variables are the same,\nexport can be simplified to  \nexport default { getAll, create, update }\n*/","import React, {useState, useEffect} from 'react';\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\n//npx json-server --port 3001 --watch db.json\n\nconst Notification = ({message}) => {\n  if(message === null){\n    return null\n  }\n\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return(\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('')\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n  \n\n   useEffect(() =>{\n    noteService.getAll()\n               .then(initialNotes => {\n                 setNotes(initialNotes)\n               })\n  }, [])\n\n  console.log('render', notesToShow.length, 'notes');\n\n\n  const addNote = (event) => {\n    event.preventDefault() // prevent page reload \n    console.log('button clicked', event.target)\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5, //random true or false \n    }\n\n    noteService.create(noteObject)\n               .then(returnedNote => {\n                 setNotes(notes.concat(returnedNote))\n                 setNewNote('')\n               })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = {\n      ...note,\n      important: !note.important\n    }\n\n    noteService.update(id, changedNote)\n               .then(returnedNote => {\n                 setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n               })\n               .catch(error => {\n                 //alert(`the note '${note.content}' was already deleted from server`)\n                 setErrorMessage(\n                   `Note '${note.content}' was already removed from server`\n                 )\n                 setTimeout(() => {\n                   setErrorMessage(null)\n                 }, 5000)\n                 setNotes(notes.filter(n => n.id !== id))\n               })\n  }\n\n  return(\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage}/>\n      <div>\n        <button onClick={()=> setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} \n          toggleImportance={()=> toggleImportanceOf(note.id)}/> //notice the key attribute must now be defined here\n        )}\n      </ul>\n\n      <form onSubmit={addNote}>\n          <input value={newNote} onChange={handleNoteChange} />\n          <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}